#  ______       _                                            _
#  |  ____|     | |                                          (_)
#  | |__   _ __ | |_ _ __ ___  _ __  _   _    ___ _ __   __ _ _ _ __   ___
#  |  __| | '_ \| __| '__/ _ \| '_ \| | | |  / _ \ '_ \ / _` | | '_ \ / _ \
#  | |____| | | | |_| | | (_) | |_) | |_| | |  __/ | | | (_| | | | | |  __/
#  |______|_| |_|\__|_|  \___/| .__/ \__, |  \___|_| |_|\__, |_|_| |_|\___|
#                             | |     __/ |              __/ |
#                             |_|    |___/              |___/               v 1.0.0

cmake_minimum_required(VERSION 3.30)

include(FetchContent)
project(Entropy VERSION 1.0.0 LANGUAGES CXX)

# Define an option to choose between executable or library
option(BUILD_ENTROPY_AS_EXECUTABLE "Build Entropy as executable" ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Detect platform
set(ENTROPY_PLATFORM MACOS)
find_package(Vulkan REQUIRED)

FetchContent_Declare(quill
    GIT_REPOSITORY https://github.com/odygrd/quill.git
    GIT_TAG master
)
FetchContent_MakeAvailable(quill)

FetchContent_Declare(flecs
    GIT_REPOSITORY https://github.com/SanderMertens/flecs.git
    GIT_TAG master
)
set(FLECS_SHARED OFF CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(flecs)

FetchContent_Declare(glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG master
)
FetchContent_MakeAvailable(glm)

FetchContent_Declare(vma
    GIT_REPOSITORY https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git
    GIT_TAG master
)
set(VMA_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)
set(VMA_BUILD_DOCUMENTATION OFF CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(vma)

FetchContent_Declare(glfw3
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG master
)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(glfw3)

file(GLOB_RECURSE SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_LIST_DIR)

else()
    set(ENTROPY_INCLUDE_DIRS
            ${CMAKE_CURRENT_SOURCE_DIR}/include
            ${CMAKE_CURRENT_SOURCE_DIR}/src
            ${CMAKE_CURRENT_SOURCE_DIR}/include/metal-cpp
            PARENT_SCOPE
    )
endif()

if(BUILD_ENTROPY_AS_EXECUTABLE)
    add_executable(${PROJECT_NAME} ${SOURCES})
else()
    add_library(${PROJECT_NAME} STATIC ${SOURCES})
endif()

target_include_directories(${PROJECT_NAME} PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_include_directories(${PROJECT_NAME} PUBLIC
${Vulkan_INCLUDE_DIRS}

${CMAKE_BINARY_DIR}/glm
${CMAKE_BINARY_DIR}/quill/include
${CMAKE_BINARY_DIR}/flecs/include
${CMAKE_BINARY_DIR}/vma/include
${CMAKE_BINARY_DIR}/glfw3/include

        ${CMAKE_SOURCE_DIR}/include
        ${CMAKE_CURRENT_SOURCE_DIR}/src # this is the shit
        ${CMAKE_CURRENT_SOURCE_DIR}/include/metal-cpp
)


target_link_libraries(${PROJECT_NAME} PRIVATE
        ${Vulkan_LIBRARIES}
        flecs::flecs_static
        GPUOpen::VulkanMemoryAllocator
        glfw
        glm::glm
        quill
)

target_compile_options(${PROJECT_NAME} PRIVATE
        -Wno-undef
        -Wno-unused-parameter
        -Wno-nested-anon-types
        -Wno-nullability-completeness
        -Wno-sign-conversion
        -Wno-unused-variable
        -Wno-missing-field-initializers
        -Wno-nullability-extension
        -Wdeprecated-declarations
        -Wno-deprecated-declarations
)

file(COPY shaders/compiled/2d_shader/2d_shader_vert.spv DESTINATION ${CMAKE_BINARY_DIR})
file(COPY shaders/compiled/2d_shader/2d_shader_frag.spv DESTINATION ${CMAKE_BINARY_DIR})

# For testing only..
file(COPY test/blank_.png DESTINATION ${CMAKE_BINARY_DIR})
file(COPY test/test.png DESTINATION ${CMAKE_BINARY_DIR})
file(COPY test/test2.png DESTINATION ${CMAKE_BINARY_DIR})

# Build config file
configure_file(config.h.in ${CMAKE_SOURCE_DIR}/include/config.h @ONLY)
